{
  "version": 3,
  "sources": ["../../service-worker/src/service-worker.ts"],
  "sourcesContent": ["/// <reference lib=\"webworker\" />\n\n// import { AckMessage, MessageAction, decodePostMessage, encodePostMessage } from 'data/service-worker';\n// import { User, getAuth, onAuthStateChanged } from 'firebase/auth';\n\n// import { FIREBASE } from 'data/firebase';\n// import { getDatabase } from 'firebase/database';\n// import { getFirestore } from 'firebase/firestore/lite';\n// import { handleLibraryDownloadMessage } from './library-download';\n// import { handleLibraryImportMessage } from './library-import';\n// import { initWorkerClient } from '@jupiter/post-message';\n// import { initializeApp } from 'firebase/app';\n\ndeclare let self: ServiceWorkerGlobalScope;\n\n// const app = initializeApp(FIREBASE.CONFIG, FIREBASE.CONFIG.APP_NAME);\n// const database = getDatabase(app);\n// const db = getFirestore(app);\n// const unsubscribers: (() => void)[] = [];\n// const { sendMessageToClients } = initWorkerClient();\n// const NATIVE_EVENT_TYPES = new Set(['ping', 'keyChanged']);\n\n// let user: User | null = null;\n// onAuthStateChanged(getAuth(app), async (u) => {\n//   user = u;\n// });\n\nself.addEventListener('install', function (event) {\n  console.info('Service worker installing... ', event);\n});\n\n// self.addEventListener('message', async function (event: ExtendableMessageEvent) {\n//   if (NATIVE_EVENT_TYPES.has(event.data.eventType)) {\n//     return;\n//   }\n\n//   const message = decodePostMessage(event.data);\n\n//   switch (message.action) {\n//     case MessageAction.libraryImportInit:\n//     case MessageAction.libraryImportStart:\n//     case MessageAction.libraryImportPause:\n//     case MessageAction.libraryImportCancel:\n//     case MessageAction.libraryImportDestroy:\n//       if (!user) throw new Error('User not found');\n\n//       await handleLibraryImportMessage({ database, db, message, user });\n\n//       return ack(message.uuid);\n\n//     case MessageAction.libraryDownloadInit:\n//     case MessageAction.libraryDownloadStart:\n//     case MessageAction.libraryDownloadPause:\n//     case MessageAction.libraryDownloadCancel:\n//     case MessageAction.libraryDownloadDestroy:\n//       if (!user) throw new Error('User not found');\n\n//       await handleLibraryDownloadMessage({ database, db, message, user });\n\n//       return ack(message.uuid);\n\n//     default:\n//       console.warn('Unhandled message', message);\n//       return;\n//   }\n// });\n\n// function ack(uuid: string, data = true) {\n//   sendMessageToClients(encodePostMessage<AckMessage>({ action: MessageAction.ack, data, uuid }));\n// }\n"],
  "mappings": ";;;AA2BA,OAAK,iBAAiB,WAAW,SAAU,OAAO;AAChD,YAAQ,KAAK,iCAAiC,KAAK;AAAA,EACrD,CAAC;",
  "names": []
}
